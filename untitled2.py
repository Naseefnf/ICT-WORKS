# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EmbU58sOChZR0lBluk4C83HFuvMTXDKg
"""

class Calculator:
    def _init_(self):
        self.operators = {'+': lambda x, y: x + y,
                          '-': lambda x, y: x - y,
                          '*': lambda x, y: x * y,
                          '/': lambda x, y: x / y}

    def calculate(self, expression):
        stack = []
        tokens = expression.split()

        for token in tokens:
            if token.isdigit() or (token[0] == '-' and token[1:].isdigit()):
                stack.append(float(token))
            elif token in self.operators:
                if len(stack) < 2:
                    print("Invalid expression")
                    return None
                else:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                    result = self.operators[token](operand1, operand2)
                    stack.append(result)
            else:
                print("Invalid operator or operand:", token)
                return None

        if len(stack) != 1:
            print("Invalid expression")
            return None

        return stack.pop()


calc = Calculator()
expression = input("Enter an expression: ")
result = calc.calculate(expression)
if result is not None:
    print("Result:", result)

class Calculator:
    def __init__(self):
        pass

    def calculate(self, expression):
        try:
            return eval(expression)
        except Exception as e:
            return f"Error: {e}"

    def run(self):
        expression = input("Enter a mathematical expression: ")
        result = self.calculate(expression)
        print("Result:", result)

calculator = Calculator()
calculator.run()

